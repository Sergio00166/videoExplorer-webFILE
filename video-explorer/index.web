<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="icon" type="image/x-icon" href="/?static=ico/video.ico">
  <title>Video Navigator</title>
  <style>

:root {
    --gap: 1rem;
    --card-radius: 16px; /* Increased for a softer look */
    --shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    --bg: #121212;
    --fg: #e0e0e0;
    --card-bg: #1e1e1e;
    --accent: #bb86fc;
    --bar-bg: #1f1f1f;
    --bar-fg: #ffffff;
    --placeholder: #333;
}
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
body {
    background: var(--bg);
    color: var(--fg);
    font-family: "Segoe UI", sans-serif;
    padding: var(--gap);
}
.address-bar {
    background: var(--bar-bg);
    color: var(--bar-fg);
    padding: 1rem;
    border-radius: var(--card-radius);
    text-align: center;
    font-family: monospace;
    font-size: 1.2rem;
    margin-bottom: var(--gap);
    box-shadow: var(--shadow);
    /* Ensure text wraps */
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
}
.folder {
    background: var(--bar-bg);
    border-radius: var(--card-radius);
    margin-bottom: var(--gap);
    overflow: hidden;
    box-shadow: var(--shadow);
}
/* Folder header and its arrow */
.folder__header {
    padding: 0.75rem 1rem;
    font-weight: 700;
    color: var(--accent);
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background 0.2s;
    border-top-left-radius: var(--card-radius);
    border-top-right-radius: var(--card-radius);
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
}
.folder__header:hover {
    background: rgba(187, 134, 252, 0.15);
}
.folder__header::after {
    content: "▾";
    transition: transform 0.2s;
}
.folder.is-open .folder__header::after {
    transform: rotate(180deg);
}
.folder__content {
    display: none;
    padding: calc(var(--gap) * 1.25);
    background: var(--card-bg);
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
}
.folder.is-open .folder__content {
    display: block;
}
.folder__content > .folder:not(:first-child) {
    margin-top: var(--gap);
}
.grid {
    display: grid;
    gap: var(--gap);
    grid-template-columns: repeat(4, 1fr);
}
@media (max-width: 1024px) {
    .grid {
        grid-template-columns: repeat(2, 1fr);
    }
}
@media (max-width: 600px) {
    .grid {
        grid-template-columns: 1fr;
    }
}
.card {
    background: var(--card-bg);
    border-radius: var(--card-radius);
    overflow: hidden;
    box-shadow: var(--shadow);
    cursor: pointer;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s, box-shadow 0.2s;
}
.card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7);
}
.thumb {
    width: 100%;
    aspect-ratio: 16/9;
    background: var(--placeholder) center/cover no-repeat;
    animation: pulse 1.5s infinite;
    position: relative;
    border-top-left-radius: var(--card-radius);
    border-top-right-radius: var(--card-radius);
}
.thumb.loading::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(90deg, #333 25%, #444 50%, #333 75%);
    background-size: 200% 100%;
    animation: loadingAnim 1.5s infinite;
}
@keyframes pulse {
    0%,
    100% {
        background-color: #333;
    }
    50% {
        background-color: #444;
    }
}
@keyframes loadingAnim {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}
.info {
    padding: 0.75rem;
    text-align: center;
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
}
.title {
    font-weight: 700;
    font-size: 1.05rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.back-btn {
    background-color: var(--accent);
    color: var(--bg);
    padding: 0.75rem 1rem;
    border-radius: var(--card-radius);
    text-align: center;
    cursor: pointer;
    margin-bottom: 1rem;
    transition: background-color 0.3s;
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
}
.back-btn:hover {
    background-color: #9c66f0;
}
/* Enhanced folder description styling */
.folder__description {
    margin: 0.5rem 1rem;
    padding: 1rem;
    font-size: 1rem;
    color: var(--fg);
    background: rgba(187, 134, 252, 0.1);
    border: 1px solid var(--accent);
    border-radius: var(--card-radius);
    white-space: pre-wrap;
    cursor: pointer;
    word-break: break-all;
    overflow-wrap: break-word;
}
.folder__desc-inner {
    display: flex;
    gap: var(--gap);
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
    align-items: center;
}
/* Poster container with layered blurred effect */
.folder__poster-container {
    position: relative;
    width: 150px;
    height: 150px;
    flex-shrink: 0;
    border-radius: var(--card-radius);
    overflow: hidden;
}
.folder__poster-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    filter: blur(8px);
    transform: scale(1.1);
    z-index: 1;
}
.folder__poster-image {
    position: relative;
    z-index: 2;
    width: 100%;
    height: 100%;
    object-fit: contain;
}
/* Scrollable text area with custom scrollbars */
.folder__description .desc-text {
    flex: 1;
    max-height: 150px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--accent) rgba(187, 134, 252, 0.1);
    white-space: pre-wrap;
    word-break: break-word;
    overflow-wrap: break-word;
}
.folder__description .desc-text::-webkit-scrollbar-thumb {
    background-color: var(--accent);
    border-radius: 8px;
}
.folder__description .desc-text::-webkit-scrollbar-thumb:hover {
    background-color: #9c66f0;
}
@media (max-width: 600px) {
    .folder__desc-inner {
        flex-direction: column;
    }
    .folder__poster-container {
        width: 100%;
        max-width: 100%;
        height: auto;
        max-height: 125px;
        aspect-ratio: 16/9;
    }
}
@media (max-width: 400px) {
    body {
        padding: 0.5rem;
        font-size: 0.8rem;
    }
    .folder__content,
    .info,
    .folder__description {
        padding: 0.5rem;
        font-size: 0.75rem;
    }
}
@media (max-width: 250px) {
    .folder__description {
        display: none;
    }
}
@media (max-width: 120px) {
    body {
        display: none;
    }
}

  </style>
</head>
<body>
  <div class="address-bar" id="folder-name"></div>
  <div class="back-btn" onclick="goBack()">Exit this menu</div>
  <br> <div id="container"></div>
  </body>
<script>

// ---------------------------------------------------------------------------
// Base Setup – determine the current folder from window.location
const { origin, pathname } = window.location;
const segs = pathname.split('/');
if (!segs.pop().includes('.')) segs.push('');
const basePath = segs.join('/');
document.getElementById('folder-name').textContent =
  decodeURIComponent(basePath) || '/';

// Global cache for thumbnails folder contents to avoid duplicate fetches
const thumbnailsCache = {};

// Utility: Toggle an element's display between "none" and "block"
function toggleContent(content) {
  content.style.display = content.style.display === 'none' ? 'block' : 'none';
}

// Utility: Navigate to the parent folder
function goBack() {
  const parent = basePath.split('/').slice(0, -1).join('/');
  window.location.href = origin + (parent || '/');
}

// Helper: When a thumbnail element comes into view, update its background image.
function updateThumbnail(thumbElem, thumbnailsArray) {
  const videoName = thumbElem.dataset.video;
  const matchingThumbnail = thumbnailsArray.find(item =>
    item.name.startsWith(videoName)
  );
  if (matchingThumbnail) {
    thumbElem.style.backgroundImage =
      `url('${origin + matchingThumbnail.path}')`;
    thumbElem.dataset.src = origin + matchingThumbnail.path;
  } else {
    thumbElem.style.backgroundImage = 'none';
  }
  thumbElem.classList.remove('loading');
}

// ---------------------------------------------------------------------------
// Intersection Observer: Lazy-load images or background images only when visible.
const io = new IntersectionObserver((entries, observer) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      if (entry.target.classList.contains('thumb')) {
        const thumbElem = entry.target;
        const thumbnailsFolder = thumbElem.dataset.folder;
        if (thumbnailsCache[thumbnailsFolder]) {
          updateThumbnail(thumbElem, thumbnailsCache[thumbnailsFolder]);
          observer.unobserve(thumbElem);
        } else {
          fetch(origin + thumbnailsFolder, {
            headers: { Accept: 'application/json' }
          })
            .then(response => response.json())
            .then(thumbnailsArray => {
              thumbnailsCache[thumbnailsFolder] = thumbnailsArray;
              updateThumbnail(thumbElem, thumbnailsArray);
              observer.unobserve(thumbElem);
            })
            .catch(() => {
              observer.unobserve(thumbElem);
            });
        }
      } else if (entry.target.tagName === 'IMG') {
        entry.target.src = entry.target.dataset.src;
        entry.target.classList.remove('loading');
        observer.unobserve(entry.target);
      } else {
        entry.target.style.backgroundImage =
          `url('${entry.target.dataset.src}')`;
        entry.target.classList.remove('loading');
        observer.unobserve(entry.target);
      }
    }
  });
}, { rootMargin: '200px' });

// ---------------------------------------------------------------------------
// Recursive function to render a folder and its contents using our Folder API.
function collectAndRender(directory, prefix, container) {
  const relativePath = prefix + directory.name + '/';

  const folder = document.createElement('div');
  folder.className = 'folder is-loading';

  const header = document.createElement('div');
  header.className = 'folder__header';
  header.textContent = directory.name;
  folder.appendChild(header);

  const content = document.createElement('div');
  content.className = 'folder__content';
  content.style.display = 'none';
  folder.appendChild(content);

  container.appendChild(folder);

  folder.addEventListener('click', function (e) {
    if (e.target.closest('.card')) return;
    toggleContent(content);
    e.stopPropagation();
  });

  fetch(origin + directory.path + '/', { headers: { Accept: 'application/json' } })
    .then(response => response.json())
    .then(items => {
      const subdirectories = items.filter(item => item.type === "directory");
      const videoItems = items.filter(item => item.type === "video");
      const photoItems = items.filter(item => item.type === "photo");
      const descriptionFile = items.find(
        item => item.type === "text" && item.name === "description.txt"
      );

      // Crear bloque de descripción solo si hay foto o descripción
      if (photoItems.length > 0 || descriptionFile) {
        const descriptionWrapper = document.createElement('div');
        descriptionWrapper.className = 'folder__description';

        const descInner = document.createElement('div');
        descInner.className = 'folder__desc-inner';

        if (photoItems.length > 0) {
          const posterContainer = document.createElement('div');
          posterContainer.className = 'folder__poster-container';

          const posterBg = document.createElement('div');
          posterBg.className = 'folder__poster-bg loading';
          posterBg.style.backgroundImage = "url('')";
          posterBg.dataset.src = origin + photoItems[0].path;
          io.observe(posterBg);
          posterContainer.appendChild(posterBg);

          const posterImg = document.createElement('img');
          posterImg.className = 'folder__poster-image loading';
          posterImg.src = "";
          posterImg.alt = "Poster";
          posterImg.dataset.src = origin + photoItems[0].path;
          io.observe(posterImg);
          posterContainer.appendChild(posterImg);

          descInner.appendChild(posterContainer);
        }

        if (descriptionFile) {
          const descText = document.createElement('div');
          descText.className = 'desc-text';
          fetch(origin + descriptionFile.path)
            .then(resp => resp.text())
            .then(textContent => {
              descText.textContent = textContent;
            })
            .catch(() => {});
          descInner.appendChild(descText);
        }

        descriptionWrapper.appendChild(descInner);
        folder.insertBefore(descriptionWrapper, content);
      }

      if (videoItems.length > 0) {
        const grid = document.createElement('div');
        grid.className = 'grid';
        videoItems.forEach(video => {
          const card = document.createElement('div');
          card.className = 'card';
          card.onclick = function (e) {
            e.stopPropagation();
            window.open(origin + video.path, '_blank');
          };

          const thumbnail = document.createElement('div');
          thumbnail.className = 'thumb loading';
          thumbnail.dataset.video = video.name;
          const videoFolder = video.path.substring(0, video.path.lastIndexOf('/'));
          thumbnail.dataset.folder = videoFolder + '/.thumbnails/';
          io.observe(thumbnail);

          const info = document.createElement('div');
          info.className = 'info';
          const title = document.createElement('div');
          title.className = 'title';
          title.textContent = video.name.replace(/\.[^/.]+$/, '');
          info.appendChild(title);

          card.append(thumbnail, info);
          grid.appendChild(card);
        });
        content.appendChild(grid);
      }

      if (subdirectories.length > 0) {
        subdirectories.sort((a, b) => a.name.localeCompare(b.name));
        subdirectories.forEach(subdir =>
          collectAndRender(subdir, relativePath, content)
        );
      }

      if (content.childElementCount === 0) {
        folder.remove();
      } else {
        folder.classList.remove('is-loading');
      }
    })
    .catch(() => {
      folder.remove();
    });
}

// ---------------------------------------------------------------------------
// Render the contents of the root folder.
async function renderAll() {
  const container = document.getElementById('container');
  const rootResponse = await fetch(origin + basePath + '/', {
    headers: { Accept: 'application/json' }
  });
  const rootItems = await rootResponse.json();

  const rootVideos = rootItems.filter(item => item.type === "video");
  if (rootVideos.length) {
    collectAndRender({ name: '.', path: basePath }, '', container);
  }

  const rootDirectories = rootItems.filter(item => item.type === "directory")
    .sort((a, b) => a.name.localeCompare(b.name));
  rootDirectories.forEach(root => collectAndRender(root, '', container));
}

renderAll();

</script>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="icon" type="image/x-icon" href="/?static=ico/video.ico">
  <title>Video Navigator</title>
  <style>

:root {
    --gap: 1rem;
    --card-radius: 16px;
    --shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
    --bg: #121212;
    --fg: #e0e0e0;
    --card-bg: #1e1e1e;
    --accent: #bb86fc;
    --bar-bg: #1f1f1f;
    --bar-fg: #ffffff;
    --placeholder: #333;
}
* { box-sizing: border-box; margin: 0; padding: 0; }
body {
    background: var(--bg);
    color: var(--fg);
    font-family: "Segoe UI", sans-serif;
    padding: var(--gap);
}
.address-bar {
    background: var(--bar-bg);
    color: var(--bar-fg);
    padding: 1rem;
    border-radius: var(--card-radius);
    text-align: center;
    font-family: monospace;
    font-size: 1.2rem;
    margin-bottom: var(--gap);
    box-shadow: var(--shadow);
    white-space: normal;
    word-break: break-all;
    overflow-wrap: break-word;
}
.folder {
    background: var(--bar-bg);
    border-radius: var(--card-radius);
    margin-bottom: var(--gap);
    overflow: hidden;
    box-shadow: var(--shadow);
}
.folder__header {
    padding: 0.75rem 1rem;
    font-weight: 700;
    color: var(--accent);
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background 0.2s;
    border-top-left-radius: var(--card-radius);
    border-top-right-radius: var(--card-radius);
}
.folder__header:hover {
    background: rgba(187, 134, 252, 0.15);
}
.folder__header::after {
    content: "â–¾";
    transition: transform 0.2s;
}
.folder.is-open .folder__header::after {
    transform: rotate(180deg);
}
.folder__content {
    display: none;
    padding: calc(var(--gap) * 1.25);
    background: var(--card-bg);
}
.folder.is-open .folder__content {
    display: block;
}
.grid {
    display: grid;
    gap: var(--gap);
    grid-template-columns: repeat(4, 1fr);
}
@media (max-width: 1024px) {
    .grid { grid-template-columns: repeat(2, 1fr); }
}
@media (max-width: 600px) {
    .grid { grid-template-columns: 1fr; }
}
.card {
    background: var(--card-bg);
    border-radius: var(--card-radius);
    overflow: hidden;
    box-shadow: var(--shadow);
    cursor: pointer;
    display: flex;
    flex-direction: column;
    transition: transform 0.2s, box-shadow 0.2s;
}
.card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7);
}
.thumb {
    width: 100%;
    aspect-ratio: 16/9;
    background: var(--placeholder) center/cover no-repeat;
    animation: pulse 1.5s infinite;
    position: relative;
    border-top-left-radius: var(--card-radius);
    border-top-right-radius: var(--card-radius);
}
.thumb.loading::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(90deg, #333 25%, #444 50%, #333 75%);
    background-size: 200% 100%;
    animation: loadingAnim 1.5s infinite;
}
@keyframes pulse {
    0%,100% { background-color: #333; }
    50%     { background-color: #444; }
}
@keyframes loadingAnim {
    0%   { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}
.info {
    padding: 0.75rem;
    text-align: center;
}
.title {
    font-weight: 700;
    font-size: 1.05rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.back-btn {
    background-color: var(--accent);
    color: var(--bg);
    padding: 0.75rem 1rem;
    border-radius: var(--card-radius);
    text-align: center;
    cursor: pointer;
    margin-bottom: 1rem;
    transition: background-color 0.3s;
}
.back-btn:hover {
    background-color: #9c66f0;
}
/* Description + Poster */
.folder__description {
    margin: 0.5rem 1rem;
    padding: 1rem;
    font-size: 1rem;
    color: var(--fg);
    background: rgba(187, 134, 252, 0.1);
    border: 1px solid var(--accent);
    border-radius: var(--card-radius);
}
.folder__desc-inner {
    display: flex;
    gap: var(--gap);
    align-items: center;
}
.folder__poster-container {
    position: relative;
    width: 150px;
    height: 150px;
    flex-shrink: 0;
    border-radius: var(--card-radius);
    overflow: hidden;
}
/* background poster skeleton */
.folder__poster-bg {
    position: absolute;
    inset: 0;
    background: var(--placeholder) center/cover no-repeat;
    animation: pulse 1.5s infinite;
    filter: blur(8px);
    transform: scale(1.1);
}
.folder__poster-bg.loading::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(90deg, #333 25%, #444 50%, #333 75%);
    background-size: 200% 100%;
    animation: loadingAnim 1.5s infinite;
}
/* foreground poster hidden until loaded */
.folder__poster-image {
    position: relative;
    z-index: 2;
    width: 100%;
    height: 100%;
    object-fit: contain;
    display: none;
}
/* scrollable desc text */
.desc-text {
    flex: 1;
    max-height: 150px;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: var(--accent) rgba(187, 134, 252, 0.1);
}
.desc-text::-webkit-scrollbar-thumb {
    background-color: var(--accent);
    border-radius: 8px;
}
@media (max-width: 600px) {
    .folder__desc-inner {
        flex-direction: column;
    }
    .folder__poster-container {
        width: 100%;
        max-width: 100%;
        height: auto;
        max-height: 125px;
        aspect-ratio: 16/9;
    }
}
@media (max-width: 400px) {
    body {
        padding: 0.5rem;
        font-size: 0.8rem;
    }
    .folder__content,
    .info,
    .folder__description {
        padding: 0.5rem;
        font-size: 0.75rem;
    }
}
@media (max-width: 250px) {
    .folder__description {
        display: none;
    }
}
@media (max-width: 120px) {
    body {
        display: none;
    }
}

  </style>
</head>
<body>
  <div class="address-bar" id="folder-name"></div>
  <div class="back-btn" onclick="goBack()">Exit this menu</div>
  <br><div id="container"></div>
  <script>

const { origin, pathname } = window.location;
const segs = pathname.split('/');
if (!segs.pop().includes('.')) segs.push('');
const basePath = segs.join('/');
document.getElementById('folder-name').textContent = "Videos @ "+decodeURIComponent(basePath) || '/';

const thumbnailsCache = {};
function toggleContent(el){ el.style.display = el.style.display==='none'?'block':'none'; }
function goBack(){
  const p = basePath.split('/').slice(0,-1).join('/');
  window.location.href = origin + (p||'/');
}

const io = new IntersectionObserver((entries, obs)=>{
  entries.forEach(e=>{
    if (!e.isIntersecting) return;
    const t = e.target;
    if (t.classList.contains('thumb')) {
      const f = t.dataset.folder;
      if (thumbnailsCache[f]) {
        applyThumb(t, thumbnailsCache[f]);
      } else {
        fetch(origin+f,{headers:{Accept:'application/json'}})
          .then(r=>r.json()).then(arr=>{
            thumbnailsCache[f]=arr;
            applyThumb(t,arr);
          })
          .catch(() => {});
      }
      obs.unobserve(t);
    }
    else if (t.classList.contains('folder__poster-bg')) {
      t.style.backgroundImage = `url('${t.dataset.src}')`;
      t.classList.remove('loading');
      const img = t.parentNode.querySelector('.folder__poster-image');
      img.onload = () => {
        img.style.display = 'block';
      };
      img.src = img.dataset.src;
      obs.unobserve(t);
      obs.unobserve(img);
    }
    else if (t.classList.contains('folder__poster-image')) {
      t.onload = () => {
        t.style.display = 'block';
        const bg = t.parentNode.querySelector('.folder__poster-bg');
        bg.style.backgroundImage = `url('${bg.dataset.src}')`;
        bg.classList.remove('loading');
      };
      t.src = t.dataset.src;
      obs.unobserve(t);
      obs.unobserve(t.parentNode.querySelector('.folder__poster-bg'));
    }
  });
},{rootMargin:'200px'});

function applyThumb(el, arr){
  const vid = el.dataset.video;
  const m = arr.find(i=>i.name.startsWith(vid));
  if (m) el.style.backgroundImage = `url('${origin+m.path}')`;
  el.classList.remove('loading');
}

async function collectAndRender(dir, prefix, container) {
  const rel = prefix + dir.name + '/';
  const frag = document.createDocumentFragment();
  const folder = document.createElement('div');
  folder.className = 'folder is-loading';
  const hdr = document.createElement('div');
  hdr.className = 'folder__header';
  hdr.textContent = dir.name;
  folder.appendChild(hdr);
  const cont = document.createElement('div');
  cont.className = 'folder__content';
  cont.style.display='none';
  folder.appendChild(cont);
  folder.addEventListener('click',e=>{
    if(!e.target.closest('.card')) toggleContent(cont);
    e.stopPropagation();
  });

  let items;
  try {
    const resp = await fetch(origin+dir.path+'/',{headers:{Accept:'application/json'}});
    items = await resp.json();
  } catch {
    return;
  }

  const subs = items.filter(i=>i.type==='directory');
  const vids = items.filter(i=>i.type==='video');
  const photos = items.filter(i=>i.type==='photo');
  const descF = items.find(i=>i.type==='text'&&i.name==='description.txt');

  if (photos.length||descF){
    const dw = document.createElement('div');
    dw.className='folder__description';
    const di = document.createElement('div');
    di.className='folder__desc-inner';
    if (photos.length){
      const pc = document.createElement('div');
      pc.className='folder__poster-container';
      const bg = document.createElement('div');
      bg.className='folder__poster-bg loading';
      bg.dataset.src = origin + photos[0].path;
      io.observe(bg);
      pc.appendChild(bg);
      const img = document.createElement('img');
      img.className='folder__poster-image';
      img.dataset.src = origin + photos[0].path;
      img.alt = 'Poster';
      img.style.display = 'none';
      pc.appendChild(img);
      io.observe(img);
      di.appendChild(pc);
    }
    if (descF){
      const dt = document.createElement('div');
      dt.className='desc-text';
      fetch(origin+descF.path).then(r=>r.text()).then(t=>dt.textContent=t);
      di.appendChild(dt);
    }
    dw.appendChild(di);
    folder.insertBefore(dw, cont);
  }

  if (vids.length){
    const grid = document.createElement('div');
    grid.className='grid';
    vids.forEach(v=>{
      const card = document.createElement('div');
      card.className='card';
      card.onclick = e=>{e.stopPropagation();window.open(origin+v.path,'_blank');};
      const th = document.createElement('div');
      th.className='thumb loading';
      th.dataset.video = v.name;
      th.dataset.folder = v.path.substring(0,v.path.lastIndexOf('/'))+'/.thumbnails/';
      io.observe(th);
      const info = document.createElement('div');
      info.className='info';
      const title = document.createElement('div');
      title.className='title';
      title.textContent = v.name.replace(/\.[^/.]+$/,'');
      info.appendChild(title);
      card.append(th, info);
      grid.appendChild(card);
    });
    cont.appendChild(grid);
  }

  if(subs.length){
    subs.sort((a,b)=>a.name.localeCompare(b.name));
    for (const s of subs) {
      await collectAndRender(s,prefix+dir.name+'/',cont);
    }
  }

  if(cont.childElementCount===0) return;
  folder.classList.remove('is-loading');
  frag.appendChild(folder);
  container.appendChild(frag);
}

async function renderAll(){
  const ctr = document.getElementById('container');
  const resp = await fetch(origin+basePath+'/',{headers:{Accept:'application/json'}});
  const all = await resp.json();
  const rootV = all.filter(i=>i.type==='video');
  if(rootV.length) await collectAndRender({name:'.',path:basePath},'',ctr);
  const dirs = all.filter(i=>i.type==='directory')
                  .sort((a,b)=>a.name.localeCompare(b.name));
  for (const d of dirs) {
    await collectAndRender(d,'',ctr);
  }
}

renderAll();

  </script>
</body>
</html>

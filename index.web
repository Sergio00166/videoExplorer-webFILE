<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0" />
    <title>Video Navigator</title>
    <style>
    :root {
        --gap: 1rem;
        --card-radius: 12px;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.5);
        --bg: #121212;
        --fg: #e0e0e0;
        --card-bg: #1e1e1e;
        --accent: #bb86fc;
        --bar-bg: #1f1f1f;
        --bar-fg: #ffffff;
        --placeholder: #333;
    }
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }
    body {
        background: var(--bg);
        color: var(--fg);
        font-family: "Segoe UI", sans-serif;
        padding: var(--gap);
    }
    .address-bar {
        background: var(--bar-bg);
        color: var(--bar-fg);
        padding: 1rem;
        border-radius: var(--card-radius);
        text-align: center;
        font-family: monospace;
        font-size: 1.2rem;
        margin-bottom: var(--gap);
        box-shadow: var(--shadow);
    }
    .folder {
        background: var(--bar-bg);
        border-radius: var(--card-radius);
        margin-bottom: var(--gap);
        overflow: hidden;
        box-shadow: var(--shadow);
    }
    .folder__header {
        padding: .75rem 1rem;
        cursor: pointer;
        font-weight: bold;
        color: var(--accent);
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: background .2s;
    }
    .folder__header:hover {
        background: rgba(187, 134, 252, 0.1);
    }
    .folder__header::after {
        content: "\25BC";
        transition: transform .2s;
    }
    .folder.is-open .folder__header::after {
        transform: rotate(180deg);
    }
    .folder__content {
        display: none;
        padding: var(--gap);
        background: var(--card-bg);
    }
    .folder.is-open .folder__content {
        display: block;
    }
    .grid {
        display: grid;
        gap: var(--gap);
        grid-template-columns: repeat(4, 1fr);
    }
    @media(max-width:1024px) {
        .grid {
            grid-template-columns: repeat(2, 1fr)
        }
    }
    @media(max-width:600px) {
        .grid {
            grid-template-columns: 1fr
        }
    }
    .card {
        background: var(--card-bg);
        border-radius: var(--card-radius);
        overflow: hidden;
        box-shadow: var(--shadow);
        cursor: pointer;
        display: flex;
        flex-direction: column;
        transition: transform .2s, box-shadow .2s;
    }
    .card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.7);
    }
    .thumb {
        width: 100%;
        aspect-ratio: 16/9;
        background: var(--placeholder) center/cover no-repeat;
        animation: pulse 1.5s infinite;
        position: relative;
    }
    .thumb.loading::before {
        content: "";
        position: absolute;
        inset: 0;
        background: linear-gradient(90deg, #333 25%, #444 50%, #333 75%);
        background-size: 200% 100%;
        animation: loadingAnim 1.5s infinite;
    }
    @keyframes pulse {
        0%,
        100% {
            background-color: #333
        }
        50% {
            background-color: #444
        }
    }
    @keyframes loadingAnim {
        0% {
            background-position: 200% 0
        }
        100% {
            background-position: -200% 0
        }
    }
    .info {
        padding: .75rem;
        text-align: center;
    }
    .title {
        font-weight: bold;
        font-size: 1.05rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .back-btn {
        background-color: var(--accent);
        color: var(--bg);
        padding: 0.75rem 1rem;
        border-radius: var(--card-radius);
        text-align: center;
        cursor: pointer;
        margin-bottom: 1rem;
        transition: background-color 0.3s;
    }

    .back-btn:hover {
        background-color: #9c66f0;
    }
    </style>
</head>

<body>
    <div class="address-bar" id="folder-name"></div>
    <div class="back-btn" onclick="goBack()">Exit this menu</div>
    <br>
    <div id="container"></div>
    <script>
    const { origin, pathname } = window.location;
    const segs = pathname.split('/');
    if(!segs.pop().includes('.')) segs.push('');
    const basePath = segs.join('/');
    document.getElementById('folder-name').textContent = decodeURIComponent(basePath) || '/';

    function goBack() {
        const parentPath = basePath.split('/').slice(0, -1).join('/');
        if(parentPath) {
            window.location.href = origin + parentPath;
        } else {
            window.location.href = origin;
        }
    }
    async function collectDirs(dir, prefix = '') {
        const resp = await fetch(origin + dir.path + '/', {
            headers: { Accept: 'application/json' }
        });
        const items = await resp.json();
        const subdirs = items.filter(i => i.type === 'directory');
        const rel = prefix ? `${prefix}${dir.name}/` : `${dir.name}/`;
        let list = [{ name: dir.name, path: dir.path, rel }];
        for(const sd of subdirs.sort((a, b) => a.name.localeCompare(b.name))) {
            list = list.concat(await collectDirs(sd, rel));
        } return list;
    }
    const io = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
            if(entry.isIntersecting) {
                const th = entry.target;
                const src = th.dataset.src;
                th.style.backgroundImage = `url('${src}')`;
                th.classList.remove('loading');
                obs.unobserve(th);
            }
        });
    }, { rootMargin: '200px' });

    async function renderAll() {
        try {
            const res = await fetch(origin + basePath, {
                headers: { Accept: 'application/json' }
            });
            const items = await res.json();
            const roots = items.filter(i => i.type === 'directory').sort((a, b) => a.name.localeCompare(b.name));
            let all = [{ name: '.', path: basePath, rel: './' }];
            for(const d of roots) {
                all = all.concat(await collectDirs(d, ''));
            }
            for(const dir of all) {
                const fld = document.createElement('div');
                fld.className = 'folder';
                const hdr = document.createElement('div');
                hdr.className = 'folder__header';
                hdr.textContent = dir.rel;
                hdr.onclick = () => fld.classList.toggle('is-open');
                fld.appendChild(hdr);
                const cnt = document.createElement('div');
                cnt.className = 'folder__content';
                const resp = await fetch(origin + dir.path + '/', {
                    headers: { Accept: 'application/json' }
                });
                const items2 = await resp.json();
                const videos = items2.filter(i => i.type === 'video');
                if(videos.length === 0) continue;
                const grid = document.createElement('div');
                grid.className = 'grid';
                videos.forEach(v => {
                    const card = document.createElement('div');
                    card.className = 'card';
                    card.onclick = () => location.href = v.path;
                    const th = document.createElement('div');
                    th.className = 'thumb loading';
                    th.dataset.src = v.path.replace(/\/([^\/]+)$/, '/.thumbnails/$1.webp');
                    io.observe(th);
                    const info = document.createElement('div');
                    info.className = 'info';
                    const title = document.createElement('div');
                    title.className = 'title';
                    title.textContent = v.name.replace(/\.[^/.]+$/, '');
                    info.appendChild(title);
                    card.append(th, info);
                    grid.appendChild(card);
                });
                cnt.appendChild(grid);
                fld.appendChild(cnt);
                document.getElementById('container').appendChild(fld);
            }
        } catch (e) { console.error(e); }
    }
    renderAll();
    </script>
</body>

</html>